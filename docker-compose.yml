version: "3"

services:
  authorizer:
    build:
      context: ./authenticator
      dockerfile: Dockerfile
    container_name: authenticator
    restart: unless-stopped
    networks:
      - db-authenticator-network
    volumes:
      - ./src:/auth/src
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    depends_on:
      - users-db
    environment:
      PORT: ${AUTH_PORT}
      DB_USER_FOR_APP: '${DB_USER_FOR_APP}'
      DB_PASS_FOR_APP: '${DB_PASS_FOR_APP}'
      DB_NAME_FOR_APP: '${DB_NAME_FOR_APP}'
      DB_HOST: '${DB_HOST}'
      DB_PORT: '${DB_PORT}'
      JWT_SECRET: '${JWT_SECRET}'

  users-db:
    image: postgis/postgis:14-3.3
    container_name: users-db
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 5s
      interval: 5s
      retries: 5
    networks:
      - db-authenticator-network
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      POSTGRES_USER: '${DB_USER}'
      POSTGRES_PASSWORD: '${DB_PASSWORD}'
      POSTGRES_DB: '${DB_NAME}'
      APP_DB_USER: '${DB_USER_FOR_APP}'
      APP_DB_PASS: '${DB_PASS_FOR_APP}'
      APP_DB_NAME: '${DB_NAME_FOR_APP}'
    volumes:
      - ./db/setup.sh:/docker-entrypoint-initdb.d/setup.sh
      - postgres-db-volume:/var/lib/postgresql/data

networks:
  db-authenticator-network:
      driver: bridge

volumes:
  postgres-db-volume:
  db-init:
